package com.amhfilho.myfinance.transaction;

import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import java.math.BigDecimal;
import java.time.LocalDate;
import java.util.Objects;

/**
 * Represents a checking account transaction. Can be credit(positive value) or debit(negative value)
 * @author Antonio M H Filho
 */
@Entity
public class Transaction implements Comparable<Transaction>{
    /**
     * Artificial identifier, generated by persistence mechanism
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String description;
    private BigDecimal value;
    private LocalDate date;
    private TransactionType type;

    /**
     * Default constructor per JPA requirements
     */
    protected Transaction(){}

    public Transaction(String description, BigDecimal value, LocalDate date, TransactionType type) {
        this.description = description;
        this.value = value;
        this.date = date;
        this.type = type;
    }

    @Override
    public String toString() {
        return "Transaction{" +
                "id=" + id +
                ", description='" + description + '\'' +
                ", value=" + value +
                ", date=" + date +
                ", type=" + type +
                '}';
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        Transaction operation = (Transaction) o;
        return Objects.equals(id, operation.id);
    }

    @Override
    public int hashCode() {
        return Objects.hash(id);
    }

    public Long getId() {
        return id;
    }

    public String getDescription() {
        return description;
    }

    public BigDecimal getValue() {
        return value;
    }

    public LocalDate getDate() {
        return date;
    }

    @Override
    public int compareTo(Transaction o) {
        if (getDate() == null || o.getDate() == null)
            return 0;
        return getDate().compareTo(o.getDate());
    }
}
